---
title: "Take Home Exercise 3"

execute: 
  echo: true
  eval: true
  warning: false
  output: true
---

[Instruction on Take Home Exercise 3](https://isss608-ay2022-23apr.netlify.app/take-home_ex/th_ex03)

## Data preparation

load libraries.

```{r}
#| output: false
#| code-fold: false
pacman::p_load(jsonlite, tidygraph, ggraph, igraph,
               visNetwork, graphlayouts, ggforce, 
               skimr, tidytext, tidyverse, widyr, kableExtra, RColorBrewer)
```

Read MC3 data from Json file.

```{r}
#| output: false
#| code-fold: false
mc3_data <- fromJSON("data/MC3/MC3.json")
```

Extracting edges

```{r}
#| output: false
#| code-fold: false
mc3_edges <- as_tibble(mc3_data$links) %>% 
  distinct() %>%
  mutate(source = as.character(source),
         target = as.character(target),
         type = as.character(type)) %>%
  group_by(source, target, type) %>%
    summarise(weights = n()) %>%
  filter(source!=target) %>%
  ungroup()
```

Extracting nodes. "product_services" column value with "character(0)" are replaced with "unknown". "revenue_omu" with NA are replace with numerical value of '0'

```{r}
#| output: false
#| code-fold: false
mc3_nodes <- as_tibble(mc3_data$nodes) %>%
  mutate(country = as.character(country),
         id = as.character(id),
         product_services = ifelse(product_services == "character(0)", "unknown", as.character(product_services)),
         revenue_omu = coalesce(as.numeric(as.character(revenue_omu)), 0),
         type = as.character(type)) %>%
  select(id, country, type, revenue_omu, product_services)


```

## Initial Network Visualisation

```{r}
#| output: false
#| code-fold: true
id1 <- mc3_edges %>%
  select(source) %>%
  rename(id = source)
id2 <- mc3_edges %>%
  select(target) %>%
  rename(id = target)
mc3_nodes1 <- rbind(id1, id2) %>%
  distinct() %>%
  left_join(mc3_nodes,
            unmatched = "drop")

mc3_graph <- tbl_graph(nodes = mc3_nodes1,
                       edges = mc3_edges,
                       directed = FALSE) %>%
  mutate(betweenness_centrality = centrality_betweenness(),
         closeness_centrality = centrality_closeness())

mc3_graph %>%
  filter(betweenness_centrality >= 100000) %>%
ggraph(layout = "fr") +
  geom_edge_link(aes(alpha=0.5)) +
  geom_node_point(aes(
    size = betweenness_centrality,
    colors = "lightblue",
    alpha = 0.5)) +
  scale_size_continuous(range=c(1,10))+
  theme_graph()

```

## Pairwise_similarity on product_services (business)
Tokenisation to product and services of each business.Regroup back after clean up at token level and assign a code 'biz_code' to every distinct services. Total nodes after clean up = 3894 (org_id_code)
```{r}
#| code-fold: false


#Original id, service and code 3894 (un group)
org_id_code <- mc3_nodes %>%
  rename(company = id, business = product_services) %>%
  unnest_tokens(word, business) %>%
  anti_join(stop_words, by = "word") %>%
  filter(word != 'unknown', word != 'related',word != 'products',word != 'product') %>%
  group_by(company) %>%
  arrange(company,word) %>%
  summarise(business = paste(unique(word), collapse = " ")) %>%
  mutate(biz_code = dense_rank(business )) %>%
  ungroup()

head(org_id_code, 100) %>%
  kbl(caption = "Orginal nodes after clean up") %>%
  kable_paper("hover", full_width = F) %>%
  scroll_box(width = "100%", height = "500px")
```



Performed group by biz_code. Nodes by unique biz_code = 3064 (grouped_biz_code)
```{r}
#| code-fold: false

#grouped_biz_code (3064 unique service and code) lost id relationship
grouped_biz_code <- org_id_code %>%
  group_by(biz_code) %>%
  summarise(business = paste(unique(business), collapse = " "), biz_code) %>%
  distinct()

head(grouped_biz_code, 100) %>%
  kbl(caption = "Unique bussiness with assigned code") %>%
  kable_paper("hover", full_width = F) %>%
  scroll_box(width = "100%", height = "500px")
```



Redo Tokenisation base on grouped_biz_code and perform pairwise_similarity business
```{r}
#| output: false
#| code-fold: false

#Tokenisation of service words
grouped_service_code_words <- grouped_biz_code %>%
unnest_tokens(word, business) %>%
anti_join(stop_words, by = "word") %>%
count(biz_code, word) %>%
ungroup()

#pairwise_similarity of service words
closest_org_service_code <- grouped_service_code_words %>%
  pairwise_similarity(biz_code, word, n) %>%
  filter(similarity >= 0.5) %>%
  arrange(desc(similarity))
```



Build table to review business similarity (Check_closest_org_service_code). similar pair = 3887 (similar_pairs)
```{r}
#| code-fold: false

#To review pairwise_similarity in table format
Check_closest_org_service_code <- closest_org_service_code %>%
  left_join(grouped_biz_code %>% select(biz_code, business) %>% rename(business_1 = business), by = c("item1" = "biz_code")) %>%
  left_join(grouped_biz_code %>% select(biz_code, business) %>% rename(business_2 = business), by = c("item2" = "biz_code"))

similar_pairs <- Check_closest_org_service_code %>%
  filter(item1 < item2)

head(Check_closest_org_service_code, 100) %>%
  kbl(caption = "Preview of similar bussiness pair with similarity value more than 0.5") %>%
  kable_paper("hover", full_width = F) %>%
  scroll_box(width = "100%", height = "500px")
```
## Regroup connected business
Simplified it to 102 Group of business.
Group number 2 found to be densely connected whit 1169 business type, base one pairwise similarity of business description.
Further classification required on Group 2.

```{r}


# Create an igraph object from your graph data
graph <- graph_from_data_frame(similar_pairs, directed = FALSE)


# Find the connected components in the graph
components <- components(graph)

# Get the membership of each node indicating its component
membership <- components$membership


# Count the number of nodes in each component
component_counts <- table(membership)

# Create a data frame with the component and count information
summary_table <- data.frame(Component = 1:length(component_counts),
                            Count = component_counts) 

summary_table <- summary_table  %>%
  rename(GroupNumber = Component, Count_business_type = Count.Freq) %>%
  select(GroupNumber,Count_business_type )%>%
  arrange(desc(Count_business_type))


# Print the summary table
head(summary_table, 200) %>%
  kbl(caption = "Preview of similar bussiness pair with similarity value more than 0.5") %>%
  kable_classic(full_width = F)  %>%
  scroll_box(width = "100%", height = "300px")

```


::: panel-tabset
## Network Map without Group 2
```{r}
# Remove the nodes belonging to component 2
graph_filtered <- delete.vertices(graph, V(graph)[membership == 2])

# Plot 
plot(graph_filtered,vertex.size=8, vertex.label=NA, layout = layout_with_gem, vertex.color="lightsteelblue2", main="Network Map without Group 2")

```

## Network Map of Group 2
```{r}

# Extract the subgraph for component 2
subgraph <- induced_subgraph(graph, V(graph)[membership == 2])

# Plot
plot(subgraph,vertex.size=8, vertex.label=NA, vertex.color="lightsteelblue2", main="Network Map of Group 2")

```
:::






## Community grouping
```{r}
ceb <- cluster_edge_betweenness(subgraph) 


plot(ceb, subgraph, vertex.size=8, vertex.label=NA, main="Exploring Community detection based on edge betweenness for Group 2") 

```
