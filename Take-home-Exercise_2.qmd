---
title: "Take Home Exercise 2"

execute: 
  echo: true
  eval: true
  warning: false
  output: true
---

[Instruction on Take Home Exercise 2](https://isss608-ay2022-23apr.netlify.app/take-home_ex/th_ex02)

## Data preparation

load libraries 
```{r}
#| output: false
#| code-fold: false
pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, lubridate, tidyverse, fontawesome, plotly)
```

Read json data file
```{r}
#| output: false
#| code-fold: false
mc2_data <- fromJSON("data/MC2/mc2_challenge_graph.json")

```

Nodes data from the original dataset
```{r}
#| output: false
#| code-fold: false
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  select(id, shpcountry, rcvcountry)

```

Extract the edges/links data from the original dataset. 
Change the date format of the 'ArrivalDate' column and obtain the year and month data from it.'parent_hscode' column is first 3 digit of hscode. Use the select() function to rearrange the column positions, and apply distinct() to remove any duplicate rows.
```{r}
#| output: false
#| code-fold: false
mc2_edges <- as_tibble(mc2_data$links) %>%
  mutate(ArrivalDate = ymd(arrivaldate)) %>%
  mutate(Year = year(ArrivalDate)) %>%
  mutate(Mth = month(ArrivalDate)) %>%
  mutate(parent_hscode = substr(hscode, 1, 3)) %>%
  select(source, target, ArrivalDate, Year, Mth, hscode, parent_hscode, valueofgoods_omu, 
         volumeteu, weightkg, valueofgoodsusd) %>% 
  distinct()
```

Inner join with HS_code_3_India.csv for 'HS_Name'
file and convert the data type of the 'parent_hscode' column in the Parent HS code table to character. Perform an inner join with the HS code table based on the 'parent_hscode' column, filtering away any unrelated hscode.(https://connect2india.com/hs-codes-directory/hs-code-3)
```{r}
#| output: false
#| code-fold: false
HS_code_3_India <- read.csv("data/MC2/HS_code_3_India.csv",colClasses=c("parent_hscode" ="character"))

mc2_edges_parent_hscode <- inner_join (mc2_edges,HS_code_3_India,
                                    join_by(parent_hscode   == parent_hscode))
```

Aggregate edges data
Group the data by source, target, Year, parent_hscode, and HS_Name
Calculate the count of weights and the sum of Totalkg within each group
Filter out rows where source is equal to target
Filter out rows where weights is greater than 20
Remove the grouping
```{r}
#| output: false
#| code-fold: false
#| 
mc2_edges_aggregated <- mc2_edges_parent_hscode %>%
  group_by(source, target, Year, parent_hscode, HS_Name) %>% 
  summarise(weights = n(), Totalkg = sum(weightkg)) %>% 
  filter(source != target) %>%
  filter(weights > 20) %>% 
  ungroup() 
```


Extract nodes from source and target to make sure every nodes is present.
```{r}
#| output: false
#| code-fold: false

id1 <- mc2_edges_aggregated %>%
  select(source) %>%
  rename(id = source)
id2 <- mc2_edges_aggregated %>%
  select(target) %>%
  rename(id = target)
mc2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```



Define node_id to each nodes and added shpcountry,rcvcountry info from original nodes data while replacing empty value. Save it as 'mc2_nodes_id'
```{r}
#| output: false
#| code-fold: false

mc2_nodes_id <- left_join(mc2_nodes_extracted, mc2_nodes, by = c("id" = "id")) %>%
  mutate(node_id = 1:nrow(.)) %>%
  mutate(shpcountry = ifelse(is.na(shpcountry), "unknown_shipTo", shpcountry)) %>%
  mutate(rcvcountry  = ifelse(is.na(rcvcountry ), "unknown_shipFrom", rcvcountry))
```

Replaced source and target text value with node_id in the 'mc2_edges_aggregated' data. And rearrange column position.
```{r}
#| output: false
#| code-fold: false

mc2_edges_aggregated_id <- mc2_edges_aggregated %>%
  left_join(mc2_nodes_id, by = c("source" = "id")) %>%
  rename(from = node_id) %>%
  select(-shpcountry,-rcvcountry) %>%
  left_join(mc2_nodes_id, by = c("target" = "id")) %>%
  rename(to = node_id) %>%
  select(-shpcountry,-rcvcountry)  %>%
  select(from,to,parent_hscode,HS_Name,Year,weights,Totalkg,source,target)
```

## Exploratory data analysis
::: panel-tabset
## Yearly total Weight

```{r}
plot_ly(
  data = mc2_edges_aggregated,
  x = ~Year,
  y = ~Totalkg,
  color = ~HS_Name,
  type = "bar"
) %>% 
  layout( title="Yearly total Weight of Seafood by category (Parent HS code)",barmode = "stack")

```

## Top Exporters by weight 

```{r}
#The provided code identifies the top 20 exporters by weight and creates a stacked bar plot to visualize their distribution.

top_20_sources <- mc2_edges_aggregated %>%
  group_by(source) %>%
  summarise(Total_Totalkg = sum(Totalkg)) %>%
  top_n(20, Total_Totalkg) %>%
  inner_join(mc2_edges_aggregated, by = "source") 

plot_ly(
  data = top_20_sources,
  x = ~Totalkg,
  y = ~reorder(source, Total_Totalkg),
  color = ~HS_Name,
  type = "bar"
) %>% 
  layout(
    title = "Top 20 Exporters by weight (2028 to 2034)",
    barmode = "stack"
  )

```
:::

Prepared and customize edges and nodes for visNetwork()
```{r}
#| output: false
#| code-fold: false
mc2_graph <- tbl_graph(nodes = mc2_nodes_id,
                       edges = mc2_edges_aggregated_id,
                       directed = TRUE)

edges_df <- mc2_graph %>%
  activate(edges) %>%
  as.tibble()

nodes_df <- mc2_graph %>%
  activate(nodes) %>%
  as.tibble() %>%
  rename(label = id) %>%
  mutate(group = rcvcountry) %>%
  mutate(id=row_number())
```


Draw visNetwork()
```{r}
#| code-fold: false

visNetwork(nodes_df,edges_df, width = "100%",main = "A really simple example") %>%
  #visNodes(shape = "square") %>% 
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "from",smooth = list(enabled = TRUE, type = "curvedCW")) %>%
  visGroups(groupname = "Oceanus",shape = "icon", icon = list(code = "f005", size = 75)) %>% 
  visLegend() %>%
  visOptions(highlightNearest = TRUE) %>%
  visOptions(selectedBy = "rcvcountry") %>%
  visHierarchicalLayout() %>%
  addFontAwesome()
```