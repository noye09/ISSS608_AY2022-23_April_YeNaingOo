[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nShow the code\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Inclass_ex04.html",
    "href": "Inclass_ex04.html",
    "title": "Inclass Exercise 04",
    "section": "",
    "text": "Show the code\npacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\n\n\nShow the code\nexam_data <- read.csv(\"data/Hands-on_Ex04/Exam_data.csv\")\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(exam_data,\n       aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote: some note here\n\n\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nqq <- ggplot(exam_data,\n       aes(sample=ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\nsw_t <- exam_data %>%\n  shapiro_test(ENGLISH) %>%\n  gt()\n\ntmp <- tempfile(fileext = '.png')\ngtsave(sw_t,tmp)\ntable_png <- png::readPNG(tmp,native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 AY2022-23 April Term_Ye Naing Oo",
    "section": "",
    "text": "Welcome to my Quarto page!\nI’m currently developing this page as part of my postgraduate studies for a Master of IT in Business at the SMU School of Information Systems. The purpose of this site is to showcase my visual analytics works, so please feel free to explore and let me know if you have any feedback or questions. Thank you for visiting!\n\n\n\nIn God we trust, all others bring data."
  },
  {
    "objectID": "Take-home-Exercise_1.html",
    "href": "Take-home-Exercise_1.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Instruction on Take Home Exercise 1"
  },
  {
    "objectID": "Take-home-Exercise_1.html#checking-missing-value",
    "href": "Take-home-Exercise_1.html#checking-missing-value",
    "title": "Take Home Exercise 1",
    "section": "Checking missing value",
    "text": "Checking missing value\n\n\nShow the code\napply(joined_data[c(\"participantId\", \"timestamp\",\"category\",\"amount\",\"householdSize\",\"haveKids\",\"age\",\"educationLevel\",\"interestGroup\",\"joviality\")], 2, function(x) sum(is.na(x)))\n\n\n participantId      timestamp       category         amount  householdSize \n             0              0              0              0              0 \n      haveKids            age educationLevel  interestGroup      joviality \n             0              0              0              0              0"
  },
  {
    "objectID": "Take-home-Exercise_1.html#checking-duplicate-rows",
    "href": "Take-home-Exercise_1.html#checking-duplicate-rows",
    "title": "Take Home Exercise 1",
    "section": "Checking duplicate rows",
    "text": "Checking duplicate rows\n\n\nShow the code\njoined_data %>% \n  distinct(participantId, timestamp, category, amount, householdSize, haveKids, age, educationLevel, interestGroup, joviality, .keep_all = TRUE) %>%\n  group_by(participantId, timestamp, category, amount, householdSize, haveKids, age, educationLevel, interestGroup, joviality) %>%\n  filter(n() > 1) %>%\n  ungroup() %>%\n  as_tibble()\n\n\n# A tibble: 0 × 10\n# … with 10 variables: participantId <dbl>, timestamp <dttm>, category <chr>,\n#   amount <dbl>, householdSize <dbl>, haveKids <lgl>, age <dbl>,\n#   educationLevel <chr>, interestGroup <chr>, joviality <dbl>"
  },
  {
    "objectID": "Inclass_ex05.html",
    "href": "Inclass_ex05.html",
    "title": "Inclass Exercise 05",
    "section": "",
    "text": "Show the code\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\nGAStech_nodes <- read_csv(\"data/Hands-on_Ex05/GAStech_email_node.csv\")\nGAStech_edges <- read_csv(\"data/Hands-on_Ex05/GAStech_email_edge-v2.csv\")\n\n\n\n\nShow the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\nShow the code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 10\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    <date> 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     <ord> Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…\n\n\n\n\nShow the code\nGAStech_edges_aggregated <- GAStech_edges %>%\n  filter(MainSubject == \"Work related\") %>%\n  group_by(source, target, Weekday) %>%\n    summarise(Weight = n()) %>%\n  filter(source!=target) %>%        \n  filter(Weight > 1) %>%\n  ungroup()\n\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  <dbl> 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday <ord> Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  <int> 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…\n\n\n\n\nShow the code\nGAStech_graph <- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\n\nShow the code\nGAStech_graph %>%\n  activate(edges) %>%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# A tibble: 1,372 × 4\n   from    to Weekday  Weight\n  <int> <int> <ord>     <int>\n1    40    41 Saturday     13\n2    41    43 Monday       11\n3    35    31 Tuesday      10\n4    40    41 Monday       10\n5    40    43 Monday       10\n6    36    32 Sunday        9\n# … with 1,366 more rows\n#\n# A tibble: 54 × 4\n     id label           Department     Title           \n  <dbl> <chr>           <chr>          <chr>           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# … with 51 more rows\n\n\n\n\nShow the code\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\nShow the code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\nShow the code\ng <- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\nShow the code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\nShow the code\ng <- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\nShow the code\ng <- GAStech_graph %>%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()"
  },
  {
    "objectID": "MC1.html",
    "href": "MC1.html",
    "title": "MC1",
    "section": "",
    "text": "Show the code\npacman::p_load(jsonlite,tidygraph,ggraph, visNetwork, tidyverse)\n\n\n\n\nShow the code\nMC1 <- fromJSON(\"data/MC1/MC1.json\")\n\n\n\n\nShow the code\nMC1_nodes <- as_tibble(MC1$nodes) %>% \n  select(id, type, country)\n\nglimpse(MC1_nodes)\n\n\nRows: 3,428\nColumns: 3\n$ id      <chr> \"Spanish Shrimp  Carriers\", \"12744\", \"143129355\", \"7775\", \"101…\n$ type    <chr> \"company\", \"organization\", \"organization\", \"organization\", \"or…\n$ country <chr> \"Nalakond\", NA, NA, NA, NA, NA, NA, \"Rio Isla\", NA, NA, NA, NA…\n\n\nShow the code\nMC1_edges <- as_tibble(MC1$links) %>% \n  select(source, target, type, weight, key)\n\nglimpse(MC1_edges)\n\n\nRows: 11,069\nColumns: 5\n$ source <chr> \"Spanish Shrimp  Carriers\", \"Spanish Shrimp  Carriers\", \"Spanis…\n$ target <chr> \"12744\", \"21323516\", \"290834957\", \"3506021\", \"Conventionâ\", \"22…\n$ type   <chr> \"ownership\", \"partnership\", \"partnership\", \"ownership\", \"family…\n$ weight <dbl> 0.9001396, 0.8458973, 0.9648761, 0.9642126, 0.8234858, 0.893152…\n$ key    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"
  },
  {
    "objectID": "Take-home-Exercise_1.html#data-preparation",
    "href": "Take-home-Exercise_1.html#data-preparation",
    "title": "Take Home Exercise 1",
    "section": "Data preparation",
    "text": "Data preparation\n\nload necessary libraries\n\npacman::p_load(ggrepel,ggthemes,hrbrthemes,rstatix,dplyr, gt,visNetwork, patchwork, tidyverse,lubridate,kableExtra,ggridges,plotly,gganimate,viridis,ggplot2movies,readxl, gifski, gapminder)\n\n\n\nRead the CSV files\nRead the CSV file “FinancialJournal.csv” and store the data in the variable “financial”. Suppress display of column types. Remove duplicate rows using unique() Apply abs() to amount column to remove negative sign for spending.\n\nfinancial<- read_csv(\"data/FinancialJournal.csv\",show_col_types = FALSE)\nfinancial <- unique(financial)\n#glimpse(financial,width=NULL)\nfinancial$amount <- abs(financial$amount )\n\nfinancial <- financial %>% \n  mutate(\n    year = year(timestamp),\n    month = month(timestamp),\n    weekdays = weekdays(timestamp),\n    day = day(timestamp)\n  )\n\nRead the CSV file “Participants.csv” and store the data in the variable “participants”. Suppress display of column types. Remove duplicate rows using unique()\n\nparticipants <- read_csv(\"data/Participants.csv\",show_col_types = FALSE)\nparticipants <- unique(participants)\n#glimpse(participants,width=NULL)\n\n\n\nPerform a left join on two tables\nPerform a left join between the “financial” and “participants” data frames, matching rows by participantId. Preview of the “joined_data” as follow.\n\njoined_data <- left_join(financial, participants, by = join_by(participantId   == participantId  ))\n#glimpse(joined_data,width=NULL)\n\n\n\nCheck for missing data\nApply the function to calculate the sum of missing values (NA) for each column specified in the joined_data data frame. Number of missing value = 0 in all 10 columns. No missing value found.\n\n\nShow the code\n# Check for missing values using is.na()\nmissing_data <- is.na(joined_data)\n\n# Check for missing values using is.na()\nmissing_data <- sapply(joined_data, function(x) sum(is.na(x)))\n\n# Print the number of missing values per column\nprint(missing_data)\n\n\n participantId      timestamp       category         amount           year \n             0              0              0              0              0 \n         month       weekdays            day  householdSize       haveKids \n             0              0              0              0              0 \n           age educationLevel  interestGroup      joviality \n             0              0              0              0 \n\n\n\n\nRemoving outliers\nRemoved Participants with with not enough data points in FinancialJournal. Filtered out these participantId from all the original tables. Plot a histogram of the outlier participantId.\n\n\nShow the code\n# Calculate count data\ncount_data <- joined_data %>%\n  count(participantId, name = \"count\")\n\n# Calculate quartiles and IQR from count_data\nq1 <- quantile(count_data$count, 0.25)\nq3 <- quantile(count_data$count, 0.75)\niqr <- q3 - q1\n\n# Define outlier cutoff values\nlower_cutoff <- q1 - 1.5 * iqr\nupper_cutoff <- q3 + 1.5 * iqr\n\n# Filter out outliers from joined_data\nfiltered_data <- joined_data %>%\n  inner_join(count_data, by = \"participantId\") %>%\n  filter(count >= lower_cutoff & count <= upper_cutoff)\n\n# Filter out outliers from participants\nfiltered_participants <- participants %>%\n  inner_join(count_data, by = \"participantId\") %>%\n  filter(count >= lower_cutoff & count <= upper_cutoff)\n\n# Filter out outliers from financial\nfiltered_financial <- financial %>%\n  inner_join(count_data, by = \"participantId\") %>%\n  filter(count >= lower_cutoff & count <= upper_cutoff)\n\n# histogram plot of participantId sorted by count\n# added lines for upper and lower Cutoff\nggplot(count_data, aes(x = reorder(participantId, count), y = count)) +\n  geom_bar(stat = \"identity\", width = 0.4) +\n  geom_hline(yintercept = lower_cutoff, linetype = \"dotted\", color = \"red\")+\n  geom_hline(yintercept = upper_cutoff, linetype = \"dotted\", color = \"red\")+\n  annotate(\"text\", x = Inf, y = lower_cutoff, label = paste(\"Lower Cutoff:\", lower_cutoff),\n           vjust = -1, hjust = 1, color = \"red\") +\n  annotate(\"text\", x = Inf, y = upper_cutoff, label = paste(\"Upper Cutoff:\", upper_cutoff),\n           vjust = 1, hjust = 1, color = \"red\") +\n  xlab(\"Participant ID\") +\n  ylab(\"Count\") +\n  ggtitle(\"Sorted Histogram on Count of records by Participant IDs \")\n\n\n\n\n\n\n\nTransform using pviot_wider\ntransform financial data using pviot_wider by “category” Replace NA wil ‘0’ and added year, month, weekdays and date fields.\n\n\nShow the code\ntransformed_financial<- filtered_financial %>% \n  pivot_wider(names_from = \"category\", \n              values_from = \"amount\",\n              values_fn = list(amount = sum))\n\ntransformed_financial$count <- NULL\ntransformed_financial$Wage <- replace(transformed_financial$Wage, is.na(transformed_financial$Wage), 0)\ntransformed_financial$Shelter <- replace(transformed_financial$Shelter, is.na(transformed_financial$Shelter), 0)\ntransformed_financial$Education <- replace(transformed_financial$Education, is.na(transformed_financial$Education), 0)\ntransformed_financial$RentAdjustment <- replace(transformed_financial$RentAdjustment, is.na(transformed_financial$RentAdjustment), 0)\ntransformed_financial$Food <- replace(transformed_financial$Food, is.na(transformed_financial$Food), 0)\ntransformed_financial$Recreation <- replace(transformed_financial$Recreation, is.na(transformed_financial$Recreation), 0)\n\n#transformed_financial <- transformed_financial %>% \n#  mutate(\n#    year = year(timestamp),\n#    month = month(timestamp),\n#    weekdays = weekdays(timestamp),\n#    date = date(timestamp)\n#  )\n\nhead(transformed_financial, 5) %>%\n  kbl(caption = \"Sample table after transformed\") %>%\n  kable_classic_2(full_width = F)\n\n\n\n\nSample table after transformed\n \n  \n    participantId \n    timestamp \n    year \n    month \n    weekdays \n    day \n    Wage \n    Shelter \n    Education \n    RentAdjustment \n    Food \n    Recreation \n  \n \n\n  \n    0 \n    2022-03-01 \n    2022 \n    3 \n    Tuesday \n    1 \n    2472.508 \n    554.9886 \n    38.00538 \n    0 \n    0 \n    0 \n  \n  \n    1 \n    2022-03-01 \n    2022 \n    3 \n    Tuesday \n    1 \n    2046.562 \n    554.9886 \n    38.00538 \n    0 \n    0 \n    0 \n  \n  \n    2 \n    2022-03-01 \n    2022 \n    3 \n    Tuesday \n    1 \n    2436.915 \n    556.5529 \n    12.81245 \n    0 \n    0 \n    0 \n  \n  \n    3 \n    2022-03-01 \n    2022 \n    3 \n    Tuesday \n    1 \n    2366.630 \n    554.9886 \n    38.00538 \n    0 \n    0 \n    0 \n  \n  \n    4 \n    2022-03-01 \n    2022 \n    3 \n    Tuesday \n    1 \n    2456.687 \n    1556.3562 \n    12.81245 \n    0 \n    0 \n    0"
  },
  {
    "objectID": "Take-home-Exercise_1.html#visulization-on-the-dataset",
    "href": "Take-home-Exercise_1.html#visulization-on-the-dataset",
    "title": "Take Home Exercise 1",
    "section": "Visulization on the dataset",
    "text": "Visulization on the dataset\n\nDistribution of participants data\n\nhouseholdSizehaveKidseducationLevelinterestGroup\n\n\n\n\nShow the code\nggplot(data = filtered_participants) +\n  geom_bar(mapping = aes(x = householdSize),color=\"grey25\", fill=\"grey90\")+\n  theme_gray() +\n  ggtitle(\"Distribution of householdSize\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = filtered_participants) +\n  geom_bar(mapping = aes(x = haveKids),color=\"grey25\", fill=\"grey90\")+\n  theme_gray() +\n  ggtitle(\"Distribution of haveKids\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = filtered_participants) +\n  geom_bar(mapping = aes(x = educationLevel),color=\"grey25\", fill=\"grey90\")+\n  theme_gray() +\n  ggtitle(\"Distribution of educationLevel\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = filtered_participants) +\n  geom_bar(mapping = aes(x = interestGroup),color=\"grey25\", fill=\"grey90\")+\n  theme_gray() +\n  ggtitle(\"Distribution of interestGroup\")+\n  theme_economist()\n\n\n\n\n\n\n\n\n\n\nDistribution of financial data\nOverview distribution of a continuous variable across multiple categories.\n\n\nShow the code\nggplot(filtered_financial, aes(x = amount,color = category, y = category)) + \n  ggridges::geom_density_ridges() +\n  scale_x_log10(labels = scales::dollar)\n\n\n\n\n\nInteractive distribution summary in ggplotly.\n\n\nShow the code\n# Create the ggplot object\np <- ggplot(filtered_financial, aes(x = amount, color = category, fill = category)) +\n  geom_density(alpha = .15) +\n  scale_x_log10(labels = scales::dollar)\n\n# Convert ggplot to plotly\np <- ggplotly(p)\n\n# Display the interactive plot\np\n\n\n\n\n\n\n\n\nWage and Spending across 12 month\nMonthly wage and spending consistent across all 12 month except RentAdjustment.\n\n\nShow the code\nggplot(data = filtered_financial, aes(x = month, y = category, fill = after_stat(x))) +\n  geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +\n  theme_minimal() +\n  theme(legend.position=\"none\",\n  axis.text = element_text(size = 8)) +\n  scale_fill_viridis() +\n  transition_time(filtered_financial$month) +\n  ease_aes('linear')\n\n\n\n\n\nSpending for Recreation is usually higher on weekends. Spending for Shelter is usually on 1st or 2nd of each month.\n\n\nShow the code\np1 <- ggplot(transformed_financial, aes(x = weekdays, y = Recreation)) +\n  geom_bar(stat = \"identity\", width = 0.5) +\n  xlab(\"Weekdays\") +\n  ylab(\"Total Spending on Recreation\") +\n  ggtitle(\"Spending on Recreation by Weekday \")+\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n\np2 <- ggplot(transformed_financial, aes(x = day, y = Shelter)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  xlab(\"Day\") +\n  ylab(\"Total Spending on Shelter\") +\n  ggtitle(\"Spending on Shelter by Day \")\n\np1+p2\n\n\n\n\n\n\n\nInterestGroup vs categorical variables\n\neducationLevelhaveKidshouseholdSize\n\n\nHighSchoolOrCOllege are majority in all interest group.\n\n\nShow the code\nfiltered_participants %>% \n  count(interestGroup,educationLevel) %>%  \n  ggplot(mapping = aes(x = interestGroup, y = educationLevel)) +\n    geom_tile(mapping = aes(fill = n))\n\n\n\n\n\n\n\nMost don’t have kids.\n\n\nShow the code\nfiltered_participants %>% \n  count(interestGroup, haveKids) %>%  \n  ggplot(mapping = aes(x = interestGroup , y = haveKids )) +\n    geom_tile(mapping = aes(fill = n))\n\n\n\n\n\n\n\nAnd group D mostly have 3 people in their household\n\n\nShow the code\nfiltered_participants %>% \n  count(interestGroup, householdSize) %>%  \n  ggplot(mapping = aes(x = interestGroup , y = householdSize )) +\n    geom_tile(mapping = aes(fill = n))\n\n\n\n\n\n\n\n\n\n\nReference:\n\nRef\n\n\nRef"
  },
  {
    "objectID": "Take-home-Exercise_2.html",
    "href": "Take-home-Exercise_2.html",
    "title": "Take Home Exercise 2",
    "section": "",
    "text": "Instruction on Take Home Exercise 2"
  },
  {
    "objectID": "Take-home-Exercise_2.html#data-preparation",
    "href": "Take-home-Exercise_2.html#data-preparation",
    "title": "Take Home Exercise 2",
    "section": "Data preparation",
    "text": "Data preparation\nload libraries\n\npacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, lubridate, tidyverse, fontawesome, plotly,igraph)\n\nRead json data file\n\nmc2_data <- fromJSON(\"data/MC2/mc2_challenge_graph.json\")\n\nNodes data from the original dataset\n\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  select(id, shpcountry, rcvcountry)\n\nExtract the edges/links data from the original dataset. Change the date format of the ‘ArrivalDate’ column and obtain the year and month data from it.’parent_hscode’ column is first 3 digit of hscode. Use the select() function to rearrange the column positions, and apply distinct() to remove any duplicate rows.\n\nmc2_edges <- as_tibble(mc2_data$links) %>%\n  mutate(ArrivalDate = ymd(arrivaldate)) %>%\n  mutate(Year = year(ArrivalDate)) %>%\n  mutate(Mth = month(ArrivalDate)) %>%\n  mutate(parent_hscode = substr(hscode, 1, 3)) %>%\n  select(source, target, ArrivalDate, Year, Mth, hscode, parent_hscode, valueofgoods_omu, \n         volumeteu, weightkg, valueofgoodsusd) %>% \n  distinct()\n\nInner join with HS_code_3_India.csv for ‘HS_Name’ file and convert the data type of the ‘parent_hscode’ column in the Parent HS code table to character. Perform an inner join with the HS code table based on the ‘parent_hscode’ column, filtering away any unrelated hscode.(https://connect2india.com/hs-codes-directory/hs-code-3)\n\nHS_code_3_India <- read.csv(\"data/MC2/HS_code_3_India.csv\",colClasses=c(\"parent_hscode\" =\"character\"))\n\nmc2_edges_parent_hscode <- inner_join (mc2_edges,HS_code_3_India,\n                                    join_by(parent_hscode   == parent_hscode))\n\nAggregate edges data Group the data by source, target, Year, parent_hscode, and HS_Name Calculate the count of weights and the sum of Totalkg within each group Filter out rows where source is equal to target Filter out rows where weights is greater than 20 Remove the grouping\n\nmc2_edges_aggregated_all <- mc2_edges_parent_hscode %>%\n  group_by(source, target, Year, parent_hscode, HS_Name) %>% \n  summarise(weights = n(), Totalkg = sum(weightkg)) %>% \n  filter(source != target) %>%\n  filter(weights > 20) %>% \n  ungroup() \n\nAggregate edges data for latest year 2034\n\nmc2_edges_aggregated <- mc2_edges_aggregated_all %>% filter(Year == \"2034\")\n\nExtract nodes from source and target to make sure every nodes is present.\n\nid1 <- mc2_edges_aggregated %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- mc2_edges_aggregated %>%\n  select(target) %>%\n  rename(id = target)\nmc2_nodes_extracted <- rbind(id1, id2) %>%\n  distinct()\n\nDefine node_id to each nodes and added shpcountry,rcvcountry info from original nodes data while replacing empty value. Save it as ‘mc2_nodes_id’\n\nmc2_nodes_id <- left_join(mc2_nodes_extracted, mc2_nodes, by = c(\"id\" = \"id\")) %>%\n  mutate(node_id = 1:nrow(.)) %>%\n  mutate(shpcountry = ifelse(is.na(shpcountry), \"unknown_shipTo\", shpcountry)) %>%\n  mutate(rcvcountry  = ifelse(is.na(rcvcountry ), \"unknown_shipFrom\", rcvcountry))\n\nReplaced source and target text value with node_id in the ‘mc2_edges_aggregated’ data. And rearrange column position.\n\nmc2_edges_aggregated_id <- mc2_edges_aggregated %>%\n  left_join(mc2_nodes_id, by = c(\"source\" = \"id\")) %>%\n  rename(from = node_id) %>%\n  select(-shpcountry,-rcvcountry) %>%\n  left_join(mc2_nodes_id, by = c(\"target\" = \"id\")) %>%\n  rename(to = node_id) %>%\n  select(-shpcountry,-rcvcountry)  %>%\n  select(from,to,parent_hscode,HS_Name,Year,weights,Totalkg,source,target)"
  },
  {
    "objectID": "Take-home-Exercise_2.html#understanding-the-data",
    "href": "Take-home-Exercise_2.html#understanding-the-data",
    "title": "Take Home Exercise 2",
    "section": "Understanding the data",
    "text": "Understanding the data\n\nYearly total WeighhaveKidseducationLevelinterestGroup\n\n\n\n\nShow the code\nplot_ly(\n  data = mc2_edges_aggregated,\n  x = ~Year,\n  y = ~Totalkg,\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout( title=\"Yearly total Weight of Seafood by category (Parent HS code)\",barmode = \"stack\")\n\n\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(\n  data = mc2_edges_aggregated,\n  x = ~Year,\n  y = ~Totalkg,\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout( title=\"Yearly total Weight of Seafood by category (Parent HS code)\",barmode = \"stack\")\n\n\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(\n  data = mc2_edges_aggregated,\n  x = ~Year,\n  y = ~Totalkg,\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout( title=\"Yearly total Weight of Seafood by category (Parent HS code)\",barmode = \"stack\")\n\n\n\n\n\n\n\n\n\n\nShow the code\nplot_ly(\n  data = mc2_edges_aggregated,\n  x = ~Year,\n  y = ~Totalkg,\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout( title=\"Yearly total Weight of Seafood by category (Parent HS code)\",barmode = \"stack\")\n\n\n\n\n\n\n\n\n\nPrepared and customize edges and nodes for visNetwork()\n\nmc2_graph <- tbl_graph(nodes = mc2_nodes_id,\n                       edges = mc2_edges_aggregated_id,\n                       directed = TRUE)\n\nedges_df <- mc2_graph %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- mc2_graph %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(group = rcvcountry) %>%\n  mutate(id=row_number())\n\nDraw visNetwork()\n\nvisNetwork(nodes_df,edges_df, width = \"100%\",main = \"A really simple example\") %>%\n  #visNodes(shape = \"square\") %>% \n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\",smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visGroups(groupname = \"Oceanus\",shape = \"icon\", icon = list(code = \"f005\", size = 75)) %>% \n  visLegend() %>%\n  visOptions(highlightNearest = TRUE) %>%\n  visOptions(selectedBy = \"rcvcountry\") %>%\n  visHierarchicalLayout() %>%\n  addFontAwesome()"
  },
  {
    "objectID": "Take-home-Exercise_2.html#exploratory-data-analysis",
    "href": "Take-home-Exercise_2.html#exploratory-data-analysis",
    "title": "Take Home Exercise 2",
    "section": "Exploratory data analysis",
    "text": "Exploratory data analysis\n\nYearly total WeightTop Exporters by weight\n\n\n\n\nShow the code\nplot_ly(\n  data = mc2_edges_aggregated_all,\n  x = ~Year,\n  y = ~Totalkg,\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout( title=\"Yearly total Weight of Seafood by category (Parent HS code)\",barmode = \"stack\")\n\n\n\n\n\n\n\n\n\n\nShow the code\n#The provided code identifies the top 10 exporters by weight and creates a stacked bar plot to visualize their distribution.\n\ntop_sources <- mc2_edges_aggregated %>%\n  group_by(source) %>%\n  summarise(Total_Totalkg = sum(Totalkg)) %>%\n  top_n(10, Total_Totalkg) %>%\n  inner_join(mc2_edges_aggregated, by = \"source\") \n\nplot_ly(\n  data = top_sources,\n  x = ~Totalkg,\n  y = ~reorder(source, Total_Totalkg),\n  color = ~HS_Name,\n  type = \"bar\"\n) %>% \n  layout(\n    title = \"Top 10 Exporters by weight (2034)\",\n    barmode = \"stack\"\n  )"
  },
  {
    "objectID": "Take-home-Exercise_2.html#network-map-by-area-of-fish-source-rcvcountry",
    "href": "Take-home-Exercise_2.html#network-map-by-area-of-fish-source-rcvcountry",
    "title": "Take Home Exercise 2",
    "section": "Network map by Area of fish source (rcvcountry)",
    "text": "Network map by Area of fish source (rcvcountry)\n\nmc2_graph <- tbl_graph(nodes = mc2_nodes_id,\n                       edges = mc2_edges_aggregated_id,\n                       directed = TRUE)\n\nedges_df <- mc2_graph %>%\n  activate(edges) %>%\n  as.tibble()\n\nnodes_df <- mc2_graph %>%\n  activate(nodes) %>%\n  as.tibble() %>%\n  rename(label = id) %>%\n  mutate(group = rcvcountry) %>%\n  mutate(title = rcvcountry) %>%\n  mutate(id=row_number())\n\n\nvisNetwork(nodes_df,edges_df, width = \"100%\",main = \"Network map by Area of fish source (rcvcountry) \") %>%\n  #visNodes(shape = \"square\") %>% \n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\",smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visLegend() %>%\n  visOptions(selectedBy = \"rcvcountry\")"
  },
  {
    "objectID": "Take-home-Exercise_2.html#network-map-by-degree_centrality.",
    "href": "Take-home-Exercise_2.html#network-map-by-degree_centrality.",
    "title": "Take Home Exercise 2",
    "section": "Network map by degree_centrality.",
    "text": "Network map by degree_centrality.\nAssign ‘group’ column for color coding Assign ‘title’ column for tooltip\n\n# Set threshold values for centrality measures\ndegree_threshold <- 5\n\n\n# Filter nodes based on centrality thresholds\nfiltered_nodes <- nodes_df[degree_centrality >= degree_threshold , ]\nfiltered_nodes$group <- degree_centrality[degree_centrality >= degree_threshold]\nfiltered_nodes$title <- degree_centrality[degree_centrality >= degree_threshold]\n\n# Create the network visualization with filtered nodes\nvisNetwork(filtered_nodes, edges_df, width = \"100%\",main = \"Network map by degree_centrality\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\", smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visNodes() %>%\n  visLegend() %>%\n  visOptions(highlightNearest = TRUE)  %>%\n  visOptions(selectedBy = \"degree_centrality\") %>%\n  visGroups(groupname = \"62\" ,shape = \"icon\", icon = list(code = \"f005\", size = 100)) %>% \n  addFontAwesome()"
  },
  {
    "objectID": "Take-home-Exercise_2.html#network-map-by-betweenness_centrality.",
    "href": "Take-home-Exercise_2.html#network-map-by-betweenness_centrality.",
    "title": "Take Home Exercise 2",
    "section": "Network map by betweenness_centrality.",
    "text": "Network map by betweenness_centrality.\nAssign ‘group’ column for color coding Assign ‘title’ column for tooltip\n\n# Set threshold values for centrality measures\nbetweenness_threshold <- 0.1\n\n# Filter nodes based on centrality thresholds\nfiltered_nodes <- nodes_df[betweenness_centrality >= betweenness_threshold , ]\nfiltered_nodes$group <- betweenness_centrality[betweenness_centrality >= betweenness_threshold]\nfiltered_nodes$title <- betweenness_centrality[betweenness_centrality >= betweenness_threshold]\n\n# Create the network visualization with filtered nodes\nvisNetwork(filtered_nodes, edges_df, width = \"100%\",main = \"Network map by betweenness_centrality\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\", smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visNodes() %>%\n  visLegend() %>%\n  visOptions(highlightNearest = TRUE)  %>%\n  visOptions(selectedBy = \"betweenness_centrality\")"
  },
  {
    "objectID": "Take-home-Exercise_2.html#network-map-by-closeness_centrality",
    "href": "Take-home-Exercise_2.html#network-map-by-closeness_centrality",
    "title": "Take Home Exercise 2",
    "section": "Network map by closeness_centrality",
    "text": "Network map by closeness_centrality\nAssign ‘group’ column for color coding Assign ‘title’ column for tooltip Added remove NA line of code for isolated nodes.\n\n# Set threshold values for centrality measures\ncloseness_threshold <- 0.3\n\n# Filter nodes based on centrality thresholds\nfiltered_nodes <- nodes_df[closeness_centrality >= closeness_threshold , ]\n\nfiltered_nodes$group <- closeness_centrality[closeness_centrality >= closeness_threshold]\nfiltered_nodes$title <- closeness_centrality[closeness_centrality >= closeness_threshold]\n\n# Exclude nodes with NA values\nfiltered_nodes <- filtered_nodes[complete.cases(filtered_nodes), ]\n\n# Create the network visualization with filtered nodes\nvisNetwork(filtered_nodes, edges_df, width = \"100%\",main = \"Network map by closeness_centrality\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\", smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visNodes() %>%\n  visLegend() %>%\n  visOptions(highlightNearest = TRUE)  %>%\n  visOptions(selectedBy = \"closeness_centrality\")"
  },
  {
    "objectID": "Take-home-Exercise_2.html#network-map-by-eigenvector_centrality",
    "href": "Take-home-Exercise_2.html#network-map-by-eigenvector_centrality",
    "title": "Take Home Exercise 2",
    "section": "Network map by eigenvector_centrality",
    "text": "Network map by eigenvector_centrality\nAssign ‘group’ column for color coding Assign ‘title’ column for tooltip Added remove NA line of code for isolated nodes.\n\n# Set threshold values for centrality measures\neigenvector_threshold <- 0.2\n\n# Filter nodes based on centrality thresholds\nfiltered_nodes <- nodes_df[eigenvector_centrality >= eigenvector_threshold , ]\n\nfiltered_nodes$group <- eigenvector_centrality[eigenvector_centrality >= eigenvector_threshold]\nfiltered_nodes$title <- eigenvector_centrality[eigenvector_centrality >= eigenvector_threshold]\n\n\n# Create the network visualization with filtered nodes\nvisNetwork(filtered_nodes, edges_df, width = \"100%\",main = \"Network map by eigenvector_centrality\") %>%\n  visIgraphLayout(layout = \"layout_with_fr\") %>%\n  visEdges(arrows = \"from\", smooth = list(enabled = TRUE, type = \"curvedCW\")) %>%\n  visNodes() %>%\n  visLegend() %>%\n  visOptions(highlightNearest = TRUE)  %>%\n  visOptions(selectedBy = \"eigenvector_centrality\")"
  },
  {
    "objectID": "Take-home-Exercise_2.html#calculate-degree-centrality",
    "href": "Take-home-Exercise_2.html#calculate-degree-centrality",
    "title": "Take Home Exercise 2",
    "section": "Calculate degree centrality",
    "text": "Calculate degree centrality\n\n# Calculate degree centrality\ndegree_centrality <- degree(mc2_graph)\n\n# Calculate betweenness centrality\nbetweenness_centrality <- betweenness(mc2_graph)\n\n# Calculate closeness centrality\ncloseness_centrality <- closeness(mc2_graph)\n\n# Calculate eigenvector centrality\neigenvector_centrality <- eigen_centrality(mc2_graph)$vector\n\n# Add centrality measures to the nodes data frame\nnodes_df$degree_centrality <- degree_centrality\nnodes_df$betweenness_centrality <- betweenness_centrality\n\nnodes_df$closeness_centrality <- closeness_centrality\nnodes_df$closeness_centrality <- round(nodes_df$closeness_centrality, digits = 1)\n\nnodes_df$eigenvector_centrality <- eigenvector_centrality\nnodes_df$eigenvector_centrality <- round(nodes_df$eigenvector_centrality, digits = 3)"
  },
  {
    "objectID": "Take-home-Exercise_3.html",
    "href": "Take-home-Exercise_3.html",
    "title": "Take Home Exercise 3",
    "section": "",
    "text": "Instruction on Take Home Exercise 3"
  },
  {
    "objectID": "Take-home-Exercise_3.html#data-preparation",
    "href": "Take-home-Exercise_3.html#data-preparation",
    "title": "Take Home Exercise 3",
    "section": "Data preparation",
    "text": "Data preparation\nload libraries.\n\npacman::p_load(jsonlite, tidygraph, ggraph, igraph,\n               visNetwork, graphlayouts, ggforce, \n               skimr, tidytext, tidyverse)\n\nRead MC3 data from Json file.\n\nmc3_data <- fromJSON(\"data/MC3/MC3.json\")\n\nExtracting edges\n\nmc3_edges <- as_tibble(mc3_data$links) %>% \n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %>%\n  group_by(source, target, type) %>%\n    summarise(weights = n()) %>%\n  filter(source!=target) %>%\n  ungroup()\n\nExtracting nodes. “product_services” column value with “character(0)” are replaced with “unknown”. “revenue_omu” with NA are replace with numerical value of ‘0’\n\nmc3_nodes <- as_tibble(mc3_data$nodes) %>%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = ifelse(product_services == \"character(0)\", \"unknown\", as.character(product_services)),\n         revenue_omu = coalesce(as.numeric(as.character(revenue_omu)), 0),\n         type = as.character(type)) %>%\n  select(id, country, type, revenue_omu, product_services)"
  },
  {
    "objectID": "data/Hands-on_Ex08/geospatial/MPSZ-2019.html",
    "href": "data/Hands-on_Ex08/geospatial/MPSZ-2019.html",
    "title": "ISSS608 Ye Naing Oo",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take-home-Exercise_3.html#initial-network-visualisation",
    "href": "Take-home-Exercise_3.html#initial-network-visualisation",
    "title": "Take Home Exercise 3",
    "section": "Initial Network Visualisation",
    "text": "Initial Network Visualisation\n\n\nShow the code\nid1 <- mc3_edges %>%\n  select(source) %>%\n  rename(id = source)\nid2 <- mc3_edges %>%\n  select(target) %>%\n  rename(id = target)\nmc3_nodes1 <- rbind(id1, id2) %>%\n  distinct() %>%\n  left_join(mc3_nodes,\n            unmatched = \"drop\")\n\nmc3_graph <- tbl_graph(nodes = mc3_nodes1,\n                       edges = mc3_edges,\n                       directed = FALSE) %>%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centrality = centrality_closeness())\n\nmc3_graph %>%\n  filter(betweenness_centrality >= 100000) %>%\nggraph(layout = \"fr\") +\n  geom_edge_link(aes(alpha=0.5)) +\n  geom_node_point(aes(\n    size = betweenness_centrality,\n    colors = \"lightblue\",\n    alpha = 0.5)) +\n  scale_size_continuous(range=c(1,10))+\n  theme_graph()\n\n\n\n\n\nTokenisation of the ‘product_services’ column. Remove stop words and remove row with unknown services.\n\ntoken_nodes <- mc3_nodes %>%\n  unnest_tokens(word, product_services)\n\nstopwords_removed <- token_nodes %>% \n  anti_join(stop_words) %>% \n  filter (word != 'unknown')\n\nCount of unique words found in product_services field\n\ntoken_nodes %>%\n  count(word, sort = TRUE) %>%\n  top_n(20) %>%\n  mutate(word = reorder(word, n)) %>%\n  ggplot(aes(x = word, y = n)) +\n  geom_col() +\n  xlab(NULL) +\n  coord_flip() +\n      labs(x = \"Count\",\n      y = \"Unique words\",\n      title = \"Count of unique words found in product_services field\")"
  },
  {
    "objectID": "Take-home-Exercise_3.html#trying-to-get-representative-token-for-each-id-work-in-progress",
    "href": "Take-home-Exercise_3.html#trying-to-get-representative-token-for-each-id-work-in-progress",
    "title": "Take Home Exercise 3",
    "section": "Trying to get representative token for each ID (work in progress)",
    "text": "Trying to get representative token for each ID (work in progress)\n\n\nShow the code\n# library(\"quanteda\")\n# data_corpus_sotu <- readRDS(url(\"https://quanteda.org/data/data_corpus_sotu.rds\"))\n# dfmat_sotu <- corpus_subset(data_corpus_sotu, Date > as.Date(\"1980-01-01\")) |>\n#     tokens(remove_punct = TRUE) |>\n#     tokens_wordstem(language = \"en\") |>\n#     tokens_remove(stopwords(\"en\")) |>\n#     dfm()\n# dfmat_sotu <- dfm_trim(dfmat_sotu, min_termfreq = 5, min_docfreq = 3)\n# \n# tstat_sim <- textstat_simil(dfmat_sotu, dfmat_sotu[, c(\"fair\", \"health\", \"terror\")],\n#     method = \"cosine\", margin = \"features\")\n# lapply(as.list(tstat_sim), head, 10)"
  },
  {
    "objectID": "Take-home-Exercise_3.html#community-grouping-work-in-progress",
    "href": "Take-home-Exercise_3.html#community-grouping-work-in-progress",
    "title": "Take Home Exercise 3",
    "section": "Community grouping (work in progress)",
    "text": "Community grouping (work in progress)\n\n\nShow the code\n# # Create the graph object\n# mc3_graph <- tbl_graph(nodes = mc3_nodes1, edges = mc3_edges, directed = FALSE)\n# \n# # Convert the graph to an igraph object\n# mc3_igraph <- as.igraph(mc3_graph)\n# \n# # Perform community detection using the Girvan-Newman algorithm\n# gn_communities <- edge.betweenness.community(mc3_igraph)\n# \n# \n# # Add community membership as a vertex attribute\n# V(mc3_graph)$community <- membership(gn_communities)\n# \n# \n# # Create the visNetwork graph object\n# vis_graph <- toVisNetworkData(mc3_graph)\n# \n# # Set the community membership as a color attribute for nodes\n# vis_graph$nodes$color <- V(mc3_graph)$community\n# \n# # Plot the graph with communities\n# visNetwork(nodes = vis_graph$nodes, edges = vis_graph$edges) %>%\n#   visIgraphLayout() %>%\n#   visOptions(highlightNearest = TRUE)"
  },
  {
    "objectID": "Inclass_ex09.html",
    "href": "Inclass_ex09.html",
    "title": "Inclass Exercise 09",
    "section": "",
    "text": "Show the code\npacman::p_load(sf, tmap, tidyverse)\n\n\nnot required to add file extension\n\n\nShow the code\nmpsz <- st_read(dsn = \"data/Hands-on_Ex08/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\MITB\\noye09\\ISSS608_AY2022-23_April_YeNaingOo\\data\\Hands-on_Ex08\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\ncheck the content\n\n\nShow the code\nmpsz\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\nShow the code\npopdata <- read_csv(\"data/Hands-on_Ex08/aspatial/respopagesextod2011to2020.csv\")\n\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nShow the code\n# Filter the dataset for Time == 2020\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n\n  # Group the data by PA, SZ, and AG\n  group_by(PA, SZ, AG) %>%\n\n  # Summarize the Pop column within each group and rename it as POP\n  summarise(`POP` = sum(`Pop`)) %>%\n\n  # Remove the grouping\n  ungroup() %>%\n\n  # Pivot the data wider, with AG as column names and POP as values\n  pivot_wider(names_from = AG, values_from = POP) %>%\n\n  # Calculate the sum of values in columns 3 to 6 and column 12,\n  # and assign it to the column YOUNG\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %>%\n\n  # Calculate the sum of values in columns 7 to 11 and columns 13 to 15,\n  # and assign it to the column ECONOMY ACTIVE\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %>%\n\n  # Calculate the sum of values in columns 16 to 21 and assign it to the column AGED\n  mutate(`AGED` = rowSums(.[16:21])) %>%\n\n  # Calculate the sum of values in columns 3 to 21 and assign it to the column TOTAL\n  mutate(`TOTAL` = rowSums(.[3:21])) %>%\n\n  # Calculate the dependency ratio by dividing the sum of YOUNG and AGED by ECONOMY ACTIVE\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`) / `ECONOMY ACTIVE`) %>%\n\n  # Select specific columns for the final output\n  select(`PA`, `SZ`, `YOUNG`, `ECONOMY ACTIVE`, `AGED`, `TOTAL`, `DEPENDENCY`)\n\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nsimple feature data frame table must be on the left\n\n\nShow the code\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\nShow the code\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nShow the code\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n===================================================================================\n\n\nShow the code\nsgpools <- read_csv(\"data/Hands-on_Ex08/aspatial/SGPools_svy21.csv\")\n\n\nRows: 306 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): NAME, ADDRESS, OUTLET TYPE\ndbl (4): POSTCODE, XCOORD, YCOORD, Gp1Gp2 Winnings\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nShow the code\nsgpools_sf <- st_as_sf(sgpools, coords = c(\"XCOORD\",\"YCOORD\"), crs = 3414)\n\n\n\n\nShow the code\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\n\n\nShow the code\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\nLegend for symbol sizes not available in view mode.\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\nLegend for symbol sizes not available in view mode."
  }
]